git init 在任意文件夹执行，则将其加入Git可以管理的仓库

git add file 将文件添加到仓库

git commit -m "A message digest" 将文件提交到仓库

git status 查看仓库的状态，包括修改和提交等

git diff [file] 查看文件具体改变内容

提交修改的步骤与提交新文件的步骤一致。

git log [--pretty=oneline] 显示提交日志
日志中的长串十六进制数字即为版本号
HEAD表示当前版本，HEAD^表示上一个版本，HEAD^^表示再上一个
HEAD~100表示往上100个版本

git reset --hard HEAD^ 恢复到上一个版本

git reset --hard [commitID] 恢复到指定的版本

git reflog 列举历史版本号

工作区(working directory)即为当前的目录

工作区目录下.git文件为版本库，其中包括暂存区(also called stage or index)
其中还有自动创建的分支master，以及指向master的HEAD指针
git add 把文件修改添加到暂存区
git commit 把暂存区的内容提交到当前分支

Git追踪并管理文件的修改而不是文件本身，每一次的修改除非经过 git add/commit
否则不会提交到分支
例如：mod 1 --> git add --> mod 2 --> git commit 只会将 mod 1 的修改提交到版本库

撤销修改
git checkout -- intro.txt 撤销工作区的修改（包括：1，修改后还没放到暂存区；2，添加到暂存区后，又作修改），回退到最近一次git add或git commit时的状态

git reset HEAD intro.txt 撤销git add,把暂存区的修改撤销，回退到工作区，然后又
可以利用git checkout -- intro.txt撤销工作区的修改

删除文件
删除工作区的文件，则与版本库不再一致，若确实删除则git rm file & git commit
否则 git checkout -- file恢复文件，用版本库中的替换工作区中的

