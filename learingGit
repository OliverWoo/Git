配置
	git config --global user.name "name"
	git config --global user.email "email"
	git config --global color.ui auto

git init 在任意文件夹执行，则将其加入Git可以管理的本地仓库

git add .    将所有文件添加到仓库
git add file 将文件添加到仓库

git commit -m "A message digest" 将文件提交到仓库

可视化工具
	gitk 查看分支历史

git status 查看仓库的状态，包括修改和提交等

git diff [file] 查看文件具体改变内容

提交修改的步骤与提交新文件的步骤一致。

git log [--pretty=oneline] 显示提交日志
日志中的长串十六进制数字即为版本号
HEAD表示当前版本，HEAD^表示上一个版本，HEAD^^表示再上一个
HEAD~100表示往上100个版本
~<n> refers to the <n>th grandparent
^<n> refers to the <n>th parent. A commit can hava more than one parents in a merge commit.

git reset --hard HEAD^ 恢复到上一个版本

git reset --hard [commitID] 恢复到指定的版本

git reflog 列举历史版本号

工作区(working directory)即为当前目录

工作区目录下.git文件为版本库，其中包括暂存区(also called stage or index)
其中还有自动创建的分支master，以及指向master的HEAD指针
git add 把文件修改添加到暂存区
git commit 把暂存区的内容提交到当前分支

Git追踪并管理文件的修改而不是文件本身，每一次的修改除非经过 git add/commit
否则不会提交到分支
例如：mod 1 --> git add --> mod 2 --> git commit 只会将 mod 1 的修改提交到版本库

撤销修改
git checkout -- intro.txt 撤销工作区的修改（包括：1，修改后还没放到暂存区；2，添加到暂存区后，又作修改），回退到最近一次git add或git commit时的状态

git reset HEAD intro.txt 撤销git add,把暂存区的修改撤销，回退到工作区，然后又
可以利用git checkout -- intro.txt撤销工作区的修改

删除文件
删除工作区的文件，则与版本库不再一致，若确实删除则git rm file & git commit
否则 git checkout -- file恢复文件，用版本库中的替换工作区中的

远程仓库
	查看远程库：git remote [-v]
	添加远程库：按照默认选项在GitHub上创建一个新repo,Git.git，与本地仓库关联
		    git remote add originGit git@github.com:OliverWoo/Git.git
		    其中远程库的名字即为 originGit

	推送本地库内容到远程库：git push -u originGit master
			 其中master为本地分支, when specifying -u option, one can omit the branch name
			 the next time. When pushing to a vacant remote, one must specify the remote 
			 repo and branch name.
	
	推送本地的提交到远端：git push originGit master
		    	
	在本地创建分支与远程分支对应：git checkout -b branch-name origin/branch-name
	建立本地分支与远程分支的关联：git branch --set-upstream branch-name origin/branch-name

拉取pull操作把远程版本库的内容更新到本地仓库，会覆盖本地内容
Synchronize a local repository with the newly updated remote repository.
If the local bran has changes that are not present in the remote bran, a merge is executed and a merge
commit created. Might need to resolve conflicts.

	git pull <repo>  <refSpec>... # If no repo specified, pull from "origin"
	
	git pull automatically merges changes into the local repo.
	git fetch only downloads changes from the remote repo. Then one can merge by FETCH_HEAD
	
多人协作流程
	1，试图用 git push origin dev 推送己方修改
	2，如果推送失败，则说明远程分支比己方分支新，需要 git pull 试图合并
	3，如果合并有冲突，则解决冲突，然后在本地提交
	4，没有冲突或者解决冲突后，git push origin branch-name 推送
	5，如果 git pull 提示"no tracking info"，则说明本地分支与与远程分支未关联，需要建立关联
	

克隆远程库到本地: git clone https://github.com/OliverWoo/Git.git
				  git clone <repo> <directory>  # Clone into a new dir

创建分支时，例如dev，dev与master指向了相同的提交版本，但是HEAD指针指向了dev，之后的修改和提交即
	针对dev分支，master不变。可以把分支合并到master，然后将分支删除。

	git checkout -b dev 创建分支并切换；相当于 git branch dev && git checkout dev
	git branch 查看当前分支，当前分支有*前缀
	git merge dev 把分支dev合并到当前分支
	git merge <commit>
	Different branches can be merged into any one branch provided that they belong to the same repo.

	git branch -d dev 删除分支dev

分支冲突
		Everything above "=====" is your local content, and everything below comes from the remote branch

		从主分支创建并切换到新分支，然后修改并提交
		切换回到主分支，然后修改并提交
		把新分支合并到主分支时发生冲突，必须手动解决

		git log --graph --pretty=oneline --abbrev-commit 显示分支合并图，提交信息单行

分支管理策略
		合并分支时Git通常采用Fast Forward模式，master直接指向了待合并分支的最近一次提交
		如果在合并后删除分支，则丢失分支信息
		When merging a "bugfix" branch into master, 
		if master has not changed since checking out a bugfix bran,
		Git will move the master position to the latest position of bugfix, i.e. "fast-forward";
		if master has been updated by others since checkout, combine changes from both brans and 
		then create a "merge commit". The master position will be updated to the newly created 
		merge commit.

		When rebasing a bugfix bran to master, commits from bugfix will be replayed and appended to
		the end of the master bran.
		In the event of a conflict when appending commits, fix the conflict before proceeding with 
		rebasing the other commits.
		Rebase does not move the position of "master".
		In any case, one can do a fast-forward or a clean merge from bugfix to master after rebasing.
		
		git rebase master
		git rebase --continue
		git rebase --abort
		git rebase --skip

		禁用Fast Forward模式，在合并时就会生成新的commit
		git merge --no-ff -m "Merge with --no-ff option"
		因为生成新的提交，所以带有 -m 参数

		实际开发过程中，master分支稳定，在dev分支开发，然后不定时合并

		Bug分支:每个bug都可以通过一个新的临时分支来修复，然后合并分支并删除临时分支
			工作在当前分支还未提交，但是需要处理bug

					git stash 暂时保存工作现场
					还未提交的修改内容和新添加的文件，留在暂存区或者工作区的情况下切换到新分支时
					会把未提交的内容带到新分支。未提交的changes might conflict with the newly switched 
					branch, and a checkout/switch to the other branch would fail. You have to commit or stash 
					changes before switching.

			确认在哪个分支修复bug，然后从分支创建临时分支，修复后提交，然后切换回来合并，最后删除临时分支
			回到原来的工作分支，恢复现场
					git stash list 列举保存的现场
					git stash pop 恢复现场，并删除保存的现场
					git stash apply [stash] 恢复但不删除
					git stash drop [stash] 删除现场

		Feature分支：在分支中开发新功能，然后合并到主分支，删除分支
				新功能开发完毕并已经提交到分支，若要取消新功能开发，则要强制删除分支
					git branch -D feature # -d 参数已经不能解决问题了

标签管理
		标签是版本库的快照，，实际指向某个commit的指针

		打标签
			git tag tagName
			git tag tagName commitID
			git tag -a tagName -m "message" commitID
			git tag -s tagName -m "message" commitID # 用私钥签名一个标签，签名采用PGP签名
		
		查看标签
			git tag
			git show tagName

		删除标签
			git tag -d tagName
			若标签已经推送到远程，则先从本地删除，然后
			git push origin :refs/tags/tagName
			
		推送某个标签到远程仓库
			git push origin tagName
			git push origin --tags # 一次性推送全部尚未推送到远端的本地标签

忽略特殊文件
		在Git工作区的根目录下创建 .gitignore 文件，然后把要忽略的文件名填入

别名
		git config --global alias.last "log -1"
